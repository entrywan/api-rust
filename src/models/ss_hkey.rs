/*
 * Entrywan API
 *
 * Manage Entrywan resources programmatically using the API.  All API requests are authenticated using [IAM tokens](https://entrywan.com/docs#iam).  Tokens can be generated and retrieved from the [portal](https://portal.entrywan.com).  The portal itself is an API client that uses an unrestricted token to access resources for an account.  This documentation is generated using an OpenAPI 3.1.0 [specification](https://spec.openapis.org/oas/latest.html).  More information about OpenAPI can be found on its [site](https://openapis.org).  The current version of [Entrywan's API spec](https://entrywan.com/openapi.yaml) is also available for inspection.  On the left of this page are links to the <i>Endpoints</i> grouped by tag and <i>Schemas</i> the API exposes.  <i>Endpoints</i> are URLs that can be accessed with any HTTP client or device. <i>Schemas</i> are machine-readable data models that represent resources.  To learn more, have a look at the [documentation](https://entrywan.com/docs).  If you have any questions, contact [support](mailto:support@entrywan.com) or your account representative.
 *
 * The version of the OpenAPI document: v1beta
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SsHkey {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<uuid::Uuid>,
    /// SSH key account owner
    #[serde(rename = "account", skip_serializing_if = "Option::is_none")]
    pub account: Option<uuid::Uuid>,
    /// SSH key creation date
    #[serde(rename = "created", skip_serializing_if = "Option::is_none")]
    pub created: Option<String>,
    /// SSH key name
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// SSH public key
    #[serde(rename = "pub", skip_serializing_if = "Option::is_none")]
    pub r#pub: Option<String>,
    /// SSH key algorithm
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<Type>,
    /// SSH key description
    #[serde(rename = "comment", skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
}

impl SsHkey {
    pub fn new() -> SsHkey {
        SsHkey {
            id: None,
            account: None,
            created: None,
            name: None,
            r#pub: None,
            r#type: None,
            comment: None,
        }
    }
}

/// SSH key algorithm
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "rsa")]
    Rsa,
    #[serde(rename = "dsa")]
    Dsa,
    #[serde(rename = "ecdsa")]
    Ecdsa,
    #[serde(rename = "ed25519")]
    Ed25519,
}

impl Default for Type {
    fn default() -> Type {
        Self::Rsa
    }
}

